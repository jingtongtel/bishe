package com.boco.human.v01.handler;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.boco.human.util.Asserts;
import com.boco.human.util.DateUtil;
import com.boco.human.util.StringUtil;
import com.boco.human.v01.service.TravelService;

/**
 * 出行强度指标的默认数据格式实现
 * 
 * @author 张晨
 *
 */
@Component
public class TravelIntensityDefHandler extends AbstractViewHandler {

	@Autowired
	private TravelService service;
	
	
	/**
	 * 从配置文件中注入指标名称
	 */
	@Value("#{rsconfig['metrics.travel.intensity']}")
	private String metricName;
	
	@Autowired
	Properties rsconfig;

	@Override
	protected String getMetricName() {
		// TODO Auto-generated method stub
		return this.metricName;
	}

	@Override
	protected String getDataViewName() {
		// TODO Auto-generated method stub
		return DATAVIEW_DEF_NAME;
	}
	
	
	/**
	 * 处理空间区域入参的方法
	 * @param paraMap
	 */
	private void handleRegion(Map paraMap){
		
		//默认统计的区域级别
		paraMap.put("regionLevelLength", "2");//临时写死
		
		
		List<String> subCodes = (List<String>) paraMap.get("subRegionCode");
		if(subCodes != null && !subCodes.isEmpty()){
			//记录前台传来的regionCode长度,数据根据此长度作为区域粒度进行统计（仅支持前台OD查询相同界别的区域）
			paraMap.put("regionLevelLength", subCodes.get(0).length());
		}
	}
	
	
	/**
	 * 处理时间入参的方法
	 * @param paraMap
	 */
	private void handleTimeVals(Map paraMap){
		Map timeObj = (Map<String, ?>) paraMap.get("timeObj");
		if(timeObj == null){
			return;
		}
		List<String> vals = (List<String>) timeObj.get("vals");
		String formatStr = (String) timeObj.get("format");
		Asserts.notNull(vals, "参数对象 vals 不能为空");
		Asserts.notNull(formatStr, "参数对象 format 不能为空");
		
		
		List<String> timeVals = new ArrayList<String>();
		
		String gargetformat = rsconfig.getProperty("metrics.travel.intensity.field"+paraMap.get("timeSize"));
		for(String timeStr : vals){
			try {
				String targetStr = DateUtil.parseFormat(timeStr,formatStr,gargetformat);
				if(paraMap.get("timeSize").equals("5")){//季度表时，追加季度转换数值
					targetStr += DateUtil.getQuarter(targetStr, gargetformat);
				}
				timeVals.add(targetStr);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				throw new IllegalArgumentException(e.getMessage(), e);
			} // 提取格式中的日期
		}
		paraMap.put("odDateD",timeVals);
	}
	
	/**
	 * 处理显示字段方法
	 * @param paraMap
	 */
	private void handleShowFields(Map paraMap) {
		List list = (List)paraMap.get("showFields");
		if(list != null && list.size()>0){
			paraMap.put("showFieldsSet",new HashSet(list));
		}
	}
	
	
	
	/**
	 * 处理orderBy方法
	 * @param paraMap
	 */
	private void handleOrderBy(Map paraMap) {
		List<String> list = (List)paraMap.get("orderBy");
		if(list != null && list.size()>0){
			for(int i=0;i<list.size();i++){
				String field= list.get(i);
				String[] fields = field.split(" ");
				fields[0] = StringUtil.camel2Underline(fields[0]);
				if(fields.length>1){
					list.set(i, StringUtil.join(fields, " "));
				}else{
					list.set(i,fields[0]);
				}
			}
		}
	}
	
	

	@Override
	protected List<Map> formatData(Map paraMap) {
		// TODO Auto-generated method stub
		Asserts.notNull(paraMap.get("regionType"), "参数对象 regionType 不能为空");
		
		//默认值
		if(paraMap.get("timeSize") == null){
			paraMap.put("timeSize","2");
		}
		this.handleRegion(paraMap);
		this.handleTimeVals(paraMap);
		this.handleShowFields(paraMap);
		this.handleOrderBy(paraMap);
		
		System.out.println(paraMap);
		return service.intensity(paraMap);
	}
}
