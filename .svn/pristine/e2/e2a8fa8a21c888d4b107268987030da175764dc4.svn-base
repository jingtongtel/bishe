package com.boco.human.v01.handler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.boco.human.v01.service.CodeService;

/**
 * 数据字典的默认数据格式实现
 * 
 *
 */
@Component
public class DictionaryDefHandler extends AbstractViewHandler {

	@Autowired
	private CodeService service;
	
	
	/**
	 * 从配置文件中注入指标名称
	 */
	@Value("#{rsconfig['code.dictionary']}")
	private String metricName;
	
	@Autowired
	Properties rsconfig;

	@Override
	protected String getMetricName() {
		// TODO Auto-generated method stub
		return this.metricName;
	}

	@Override
	protected String getDataViewName() {
		// TODO Auto-generated method stub
		return DATAVIEW_DEF_NAME;
	}
	
	
	
	
	

	@Override
	protected Object formatData(Map paraMap) {
		// TODO Auto-generated method stub		
		
		System.out.println(paraMap);
		String key = "";
		List<Map> list = service.queryDictionay(paraMap);
		List<Map<String,?>> itemList = null;
		Map resultMap = new HashMap();
		for(Map map:list){
			if(!key.equals((String)map.get("DICTYPE"))){
				key = (String)map.get("DICTYPE");
				itemList = new ArrayList<Map<String,?>>();
				resultMap.put(key, itemList);
			}
			Map itemMap = new HashMap();
			itemList.add(itemMap);
			itemMap.put("name",map.get("NAME"));
			itemMap.put("value",map.get("VALUE"));
		}
		
		return resultMap;
	}
}
