package com.boco.human.v01.handler;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.boco.human.util.Asserts;
import com.boco.human.util.DateUtil;
import com.boco.human.v01.service.PopulationService;

@Component
public class PopulationRegionDefHandler  extends AbstractViewHandler{
	
	@Autowired
	private PopulationService service;

	
	@Value("#{rsconfig['metrics.population.region']}")
	private String metricName;
	@Override
	protected String getMetricName() {
		// TODO Auto-generated method stub
		return this.metricName;
	}

	@Override
	protected String getDataViewName() {
		// TODO Auto-generated method stub
		return DATAVIEW_DEF_NAME;
	}
	@Autowired
	Properties rsconfig;
	
	
	/**
	 * 处理空间区域入参的方法
	 * @param paraMap
	 */
	private void handleRegion(Map paraMap){
		//默认统计的区域级别
		paraMap.put("regionLevelLength", "6");//临时写死
	
		
		List<String> subCodes = (List<String>) paraMap.get("subRegionCode");
		if(subCodes != null && !subCodes.isEmpty()){
			//记录前台传来的subRegionCode长度,数据根据此长度作为区域粒度进行统计
			paraMap.put("regionLevelLength", subCodes.get(0).length());
		}
	}
	
	

	


	
	
	private void handleTimeVals(Map paraMap){
		Map timeObj = (Map<String, ?>) paraMap.get("timeObj");
		if(timeObj == null){
			return;
		}
		List<String> vals = (List<String>) timeObj.get("vals");
		String formatStr = (String) timeObj.get("format");
		Asserts.notNull(vals, "参数对象 vals 不能为空");
		Asserts.notNull(formatStr, "参数对象 format 不能为空");
		List<String> timeVals = new ArrayList<String>();
		//默认统计的区域级别
		
		String gargetformat = rsconfig.getProperty("metrics.population.region.field"+paraMap.get("timeSize"));
		for(String timeStr : vals){
			try {
				String targetStr = DateUtil.parseFormat(timeStr,formatStr,gargetformat);
				if(paraMap.get("timeSize").equals("6")){//季度表时，追加季度转换数值
					targetStr += DateUtil.getQuarter(targetStr, gargetformat);
				}
				timeVals.add(targetStr);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				throw new IllegalArgumentException(e.getMessage(), e);
			} // 提取格式中的日期
		}
		paraMap.put("timeVals",timeVals);
	}
	
	
	@Override
	protected List formatData(Map paraMap) {
		// TODO Auto-generated method stub
		
		
		System.out.println(rsconfig.getProperty("metrics.population.region"));
		
		Asserts.notNull(paraMap.get("regionType"), "参数对象 regionType 不能为空");
		
		//默认值
		if(paraMap.get("timeSize") == null){
			paraMap.put("timeSize","4");
		}
		this.handleRegion(paraMap);
		this.handleTimeVals(paraMap);
	
		System.out.println(paraMap);
		
		
		return service.queryRegion(paraMap);
	}
	
	
	

}
